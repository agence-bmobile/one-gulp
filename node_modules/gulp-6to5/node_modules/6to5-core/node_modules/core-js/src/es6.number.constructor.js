!function(binar, octal, _Number, NumberProto){
  function toNumber(it){
    if(typeof it == 'string' || isObject(it)){
      var s = it + '', m;
      if(m = s.match(octal))return parseInt(m[1], 8);
      if(m = s.match(binar))return parseInt(m[1], 2);
    } return +it;
  }
  if(framework && (Number('0o1') != 1 || Number('0b1') != 1)){
    Number = function Number(it){
      return this instanceof Number ? new _Number(toNumber(it)) : toNumber(it);
    }
    forEach.call(DESC
      ? getNames(_Number)
      : array('MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY'),
    function(key){
      key in Number || defineProperty(Number, key, getOwnDescriptor(_Number, key));
    });
    Number[PROTOTYPE] = NumberProto;
    NumberProto[CONSTRUCTOR] = Number;
    hidden(global, NUMBER, Number);
  }
}(/^0b([01]+)$/, /^0o([0-7]+)$/, Number, Number[PROTOTYPE]);